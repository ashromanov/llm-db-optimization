ANALYZE_SCHEMA = (
    "Role: Senior Database Performance Analyst.\n"
    "Database Engine: Trino (PrestoDB fork) - distributed SQL query engine.\n"
    "Table Format: Apache Iceberg - open table format for huge analytic datasets.\n\n"
    "IMPORTANT Iceberg Features:\n"
    "- Schema evolution: add/drop/rename columns without rewriting data\n"
    "- ACID transactions: atomic commits, isolation, consistency\n"
    "Goal: Analyze the current database schema and query workload to create a detailed optimization plan.\n\n"
    "INPUT DDL (Trino SQL):\n{ddl_statements}\n\n"
    "INPUT QUERIES (sorted by impact):\n{queries}\n\n"
    "Your Task:\n"
    "Perform a comprehensive analysis and provide a NATURAL LANGUAGE optimization plan. Do NOT write SQL code.\n\n"
    "Analysis Steps:\n"
    "1. SCHEMA ANALYSIS:\n"
    "   - Identify tables, their columns, and current data types\n"
    "   - List existing constraints\n"
    "   - Note any obvious inefficiencies (e.g., suboptimal types)\n\n"
    "2. QUERY PATTERN ANALYSIS:\n"
    "   - Analyze most impactful queries\n"
    "   - Identify common JOIN patterns, WHERE clause filters, GROUP BY operations\n"
    "   - Detect potential N+1 queries or missing data\n"
    "   - Find opportunities for materialized views or computed columns\n\n"
    "3. OPTIMIZATION RECOMMENDATIONS:\n"
    "   - Recommend data type optimizations\n"
    "   - Propose materialized views for complex aggregations\n"
    "   - Recommend denormalization opportunities\n\n"
    "4. MIGRATION STRATEGY:\n"
    "   - Outline the order of schema changes\n"
    "   - Identify tables that need restructuring\n"
    "   - Note any data transformations required\n"
    "   - You MUST create new tables, PREVIOUS TABLES ARE READONLY.\n"
    "OUTPUT FORMAT:\n"
    "Provide a structured text plan with sections:\n"
    "## Schema Analysis\n"
    "[Your analysis of current schema]\n\n"
    "## Query Patterns\n"
    "[Common patterns and bottlenecks]\n\n"
    "## Optimization Plan\n"
    "[Detailed recommendations with reasoning]\n\n"
    "## Migration Strategy\n"
    "[Step-by-step approach]\n\n"
    "Remember: This is a PLAN, not code. Use natural language to explain WHY and HOW to optimize.\n"
)


DEVELOP_DDL_FROM_PLAN = (
    "Role: Senior Database Migration Developer.\n"
    "Database Engine: Trino (PrestoDB fork) - distributed SQL query engine.\n"
    "Table Format: Apache Iceberg - MUST use one of the supported formats: ORC, PARQUET, or AVRO.\n\n"
    "CRITICAL: ALL operations will be performed for Trino + Iceberg configuration. You MUST create new tables for migrations.\n\n"
    "IMPORTANT: Trino + Iceberg SQL syntax:\n"
    "- CREATE TABLE ... WITH (format = 'ORC') or WITH (format = 'PARQUET') or WITH (format = 'AVRO')\n"
    "- NO explicit indexes - Iceberg uses metadata for optimization\n"
    "- Data types: Use Trino types (INTEGER, BIGINT, DOUBLE, VARCHAR, TIMESTAMP, DATE, etc.)\n"
    "- Materialized views: CREATE MATERIALIZED VIEW ... WITH (format = 'ORC|PARQUET|AVRO')\n\n"
    "ICEBERG TABLE CREATION SYNTAX:\n"
    "CREATE TABLE catalog.schema.table_name (\n"
    "  id BIGINT,\n"
    "  name VARCHAR,\n"
    "  created_at TIMESTAMP\n"
    ") WITH (\n"
    "  format = 'PARQUET'\n"
    ");\n\n"
    "CRITICAL NAMING RULES:\n"
    "- ALL DDL and DML must use the FULL path to tables in the format <catalog>.<schema>.<table>.\n"
    "- The FIRST DDL statement MUST be the creation of the new schema in the given catalog.\n"
    "- All INSERT, SELECT, and JOIN queries must also use the FULL path <catalog>.<schema>.<table>.\n\n"
    "OPTIMIZATION PLAN:\n"
    "{optimization_plan}\n"
    "ORIGINAL DDL:\n"
    "{ddl_statements}\n"
    "Your Task:\n"
    "Generate the NEW optimized DDL statements that implement the optimization plan.\n\n"
    "Implementation Rules:\n"
    "- Follow the optimization plan EXACTLY\n"
    "- Create new table structures with optimized data types\n"
    "- Create materialized views if specified in the plan\n"
    "- Add appropriate constraints (PRIMARY KEY, FOREIGN KEY etc.)\n"
    "- Preserve all data columns (do not lose information)\n"
    "- Use meaningful names\n"
    "- FULLY qualify all table names with <catalog>.<schema>.<table>\n"
    "- Start with CREATE SCHEMA <catalog>.<NewSchema>\n"
    "- Use ONLY ORC, PARQUET, or AVRO formats\n\n"
    "===== CRITICAL OUTPUT FORMAT (MUST FOLLOW EXACTLY) =====\n"
    "RULE 1: Output ONLY pure SQL code. Nothing else.\n"
    "RULE 2: NO markdown (no ```sql, no ```, no code blocks).\n"
    "RULE 3: NO explanatory text (no 'Here is...', no 'The following...', no descriptions).\n"
    "RULE 4: NO comments in SQL (no --, no /* */).\n"
    "RULE 5: NO empty lines between statements.\n"
    "RULE 6: One SQL statement per line.\n"
    "RULE 7: Each line must be a complete executable SQL statement ending with semicolon.\n\n"
    "CORRECT EXAMPLE:\n"
    "CREATE SCHEMA data.NewSchema;\n"
    "CREATE TABLE data.myschema.users (id INT PRIMARY KEY, name VARCHAR(100) NOT NULL) WITH (format = 'PARQUET');\n"
    "INSERT INTO data.myschema.users SELECT * FROM data.public.users;\n"
    "CREATE MATERIALIZED VIEW data.myschema.mv_stats AS SELECT user_id, COUNT(*) FROM data.myschema.orders GROUP BY user_id;\n\n"
    "WRONG EXAMPLE (DO NOT DO THIS):\n"
    "Here are the optimized tables:\n"
    "```sql\n"
    "CREATE TABLE users...\n"
    "```\n\n"
    "START OUTPUTTING SQL NOW (nothing else, just SQL):\n"
)


DEVELOP_MIGRATIONS_FROM_PLAN = (
    "Role: Senior Database Migration Developer.\n"
    "Database Engine: Trino (PrestoDB fork) - distributed SQL query engine.\n"
    "Table Format: Apache Iceberg - MUST use one of the supported formats: ORC, PARQUET, or AVRO.\n\n"
    "CRITICAL: ALL new tables MUST be created with format = 'ORC' or 'PARQUET' or 'AVRO'\n\n"
    "IMPORTANT: Trino + Iceberg SQL syntax for migrations:\n"
    "- CREATE TABLE ... WITH (format = 'ORC|PARQUET|AVRO')\n"
    "- INSERT INTO iceberg_table ... SELECT ... FROM old_table\n"
    "- Iceberg supports schema evolution: ALTER TABLE iceberg_table ADD COLUMN new_col TYPE\n"
    "- CREATE TABLE AS SELECT (CTAS): CREATE TABLE new_table WITH (format = 'ORC|PARQUET|AVRO') AS SELECT ...\n"
    "- CREATE MATERIALIZED VIEW ... WITH (format = 'ORC|PARQUET|AVRO') AS SELECT ...\n\n"
    "OPTIMIZATION PLAN:\n"
    "{optimization_plan}"
    "OLD DDL:\n"
    "{input_ddl_statements}\n"
    "NEW DDL:\n"
    "{output_ddl_statements}\n"
    "Your Task:\n"
    "Generate idempotent SQL migration commands to safely migrate data from OLD schema to NEW schema.\n\n"
    "Migration Requirements:\n"
    "- Follow the migration strategy outlined in the optimization plan\n"
    "- Output ONLY executable SQL statements, one per line, in correct dependency order\n"
    "- Create new tables if needed (CREATE TABLE IF NOT EXISTS)\n"
    "- Add columns with proper defaults (ALTER TABLE ... ADD COLUMN ... DEFAULT ...)\n"
    "- Backfill data using INSERT ... SELECT with explicit column lists\n"
    "- Add constraints LAST (after all data)\n"
    "- DO NOT DROP existing tables (preserve old schema alongside new)\n"
    "- Make statements idempotent where possible\n"
    "- Handle table splits: create new tables and distribute rows\n"
    "- Handle table merges: consolidate with deduplication logic\n"
    "- Use ONLY ORC, PARQUET, or AVRO formats\n\n"
    "===== CRITICAL OUTPUT FORMAT (MUST FOLLOW EXACTLY) =====\n"
    "RULE 1: Output ONLY pure SQL code. Nothing else.\n"
    "RULE 2: NO markdown (no ```sql, no ```, no code blocks).\n"
    "RULE 3: NO explanatory text (no 'Here is...', no 'Step 1:', no descriptions).\n"
    "RULE 4: NO comments in SQL (no --, no /* */).\n"
    "RULE 5: NO empty lines between statements.\n"
    "RULE 6: One SQL statement per line.\n"
    "RULE 7: Each line must be a complete executable SQL statement ending with semicolon.\n\n"
    "CORRECT EXAMPLE:\n"
    "CREATE TABLE IF NOT EXISTS users_new (id INT PRIMARY KEY, name VARCHAR(100));\n"
    "INSERT INTO users_new (id, name) SELECT id, name FROM users;\n"
    "WRONG EXAMPLE (DO NOT DO THIS):\n"
    "Step 1: Create new table\n"
    "```sql\n"
    "CREATE TABLE...\n"
    "```\n\n"
    "START OUTPUTTING SQL NOW (nothing else, just SQL):\n"
)


OPTIMIZE_QUERY = (
    "Role: SQL Performance Engineer.\n"
    "Database Engine: Trino (PrestoDB fork) - distributed SQL query engine.\n"
    "Table Format: Apache Iceberg tables.\n\n"
    "Given the migration commands (which imply new schema) rewrite and optimize the provided Trino SQL query to target the NEW Iceberg schema.\n\n"
    "IMPORTANT: Trino + Iceberg SQL optimization features:\n"
    "- Prefer materialized Iceberg views for pre-aggregated data\n"
    "- Iceberg stat-based pruning: WHERE filters on columns with statistics\n\n"
    "Migration / Schema Hints:\n"
    "{migration_commands}\n"
    "Original Query:\n"
    "{query}\n"
    "Optimization Rules:\n"
    "- Apply new table / column names.\n"
    "- Remove unnecessary subqueries / CTEs.\n"
    "- Push filters down; replace SELECT * with explicit columns.\n"
    "- Eliminate redundant JOINs.\n"
    "- Prefer EXISTS over IN when appropriate; anti-joins where faster.\n"
    "- Use window functions only if they reduce complexity.\n"
    "- Keep semantics identical if needed use materialized views where possible.\n"
    "- If materialized views or generated columns help, use them.\n"
    "===== CRITICAL OUTPUT FORMAT (MUST FOLLOW EXACTLY) =====\n"
    "RULE 1: Output ONLY the SQL query. Nothing else.\n"
    "RULE 2: NO markdown (no ```sql, no ```, no code blocks).\n"
    "RULE 3: NO explanatory text (no 'Here is...', no 'Optimized:', no descriptions).\n"
    "RULE 4: NO comments in SQL (no --, no /* */).\n"
    "RULE 5: Output the complete SQL query as-is, ready to execute.\n\n"
    "CORRECT EXAMPLE:\n"
    "SELECT u.id, u.name FROM users_new u WHERE u.created_at > '2024-01-01';\n\n"
    "WRONG EXAMPLE (DO NOT DO THIS):\n"
    "Here is the optimized query:\n"
    "```sql\n"
    "SELECT...\n"
    "```\n\n"
    "START OUTPUTTING SQL NOW (nothing else, just the query):\n"
)