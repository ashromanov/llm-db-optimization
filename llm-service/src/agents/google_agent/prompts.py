CREATE_NEW_DDL_STATEMENTS = (
    "Role: Senior Database Performance Engineer.\n"
    "Goal: Propose an improved physical schema (CREATE statements) for the given tables to better serve the 10 most costly queries.\n\n"
    "INPUT DDL (original schema):\n"
    "[DDL_START]\n"
    "{input_ddl_statements}\n"
    "[DDL_END]\n\n"
    "INPUT QUERIES (most costly):\n"
    "[QUERIES_START]\n"
    "{input_queries}\n"
    "[QUERIES_END]\n\n"
    "Rules:\n"
    "- Preserve all existing data logically (no loss of meaning or precision).\n"
    "- You MAY: adjust data types, add/remove redundant indexes, add composite indexes, add/generated columns, normalize/denormalize minimally, add constraints (PK, FK, UNIQUE, CHECK), partition/cluster, rename for clarity (only if strictly beneficial), reorder columns if helpful.\n"
    "- You MAY add materialized views ONLY if they clearly serve multiple costly queries; name them mv_<purpose>.\n"
    "- You MUST keep every original column (or a generated equivalent) unless it is provably redundant AND still derivable.\n"
    "- Do NOT include data migration statements.\n"
    "- Do NOT include comments except brief inline ones (-- ...) only when non-obvious (index purpose, partition key rationale).\n"
    "- Prefer shortest accurate numeric/text types; avoid over-wide VARCHAR/TEXT.\n"
    "- Index strategy: composite indexes ordered by (filter columns -> join columns -> ordering/grouping). Avoid overlapping duplicates.\n"
    "- If you introduce partitioning, justify with a short inline comment.\n"
    "- If no beneficial structural change is possible, output the original DDL normalized for consistency.\n\n"
    "Output Format (STRICT):\n"
    "- Only DDL statements, one per line.\n"
    "- Allowed statements: CREATE TABLE, CREATE INDEX, CREATE UNIQUE INDEX, ALTER TABLE ... ADD CONSTRAINT, CREATE MATERIALIZED VIEW (if used).\n"
    "- No surrounding prose, no code fences.\n"
)

CREATE_MIGRATIONS = (
    "Role: Senior Database Migration Engineer.\n"
    "Task: Generate idempotent SQL migration commands to transform OLD schema data into the NEW schema.\n\n"
    "OLD DDL:\n"
    "[OLD_DDL_START]\n"
    "{input_ddl_statements}\n"
    "[OLD_DDL_END]\n\n"
    "NEW DDL:\n"
    "[NEW_DDL_START]\n"
    "{output_ddl_statements}\n"
    "[NEW_DDL_END]\n\n"
    "Requirements:\n"
    "- Output ONLY executable SQL statements, one per line, in correct dependency order.\n"
    "- Include: CREATE (if needed), ALTER, RENAME, ADD COLUMN with defaults, data backfill (INSERT ... SELECT ...), index creation AFTER data load, constraints last.\n"
    "- Preserve all data; populate new/generated/renamed columns.\n"
    "- For splits: create new tables and distribute rows.\n"
    "- For merges: consolidate with deduping logic (explain briefly via inline comment if ambiguous).\n"
    "- Use explicit column lists in INSERT ... SELECT.\n"
    "- Wrap destructive steps (drops) at the end and only after successful migration (comment them out prefixed with -- DROP ... if risky).\n"
    "- Make statements idempotent where feasible (e.g., CREATE TABLE IF NOT EXISTS, conditional adds when dialect supports; otherwise comment safeguards).\n"
    "- No transaction wrappers (handled externally).\n"
    "Output: only SQL statements, no explanations besides minimal inline comments.\n"
)

OPTIMIZE_QUERY = (
    "Role: SQL Performance Engineer.\n"
    "Given the migration commands (which imply new schema) rewrite and optimize the provided SQL query to target the NEW schema.\n\n"
    "Migration / Schema Hints:\n"
    "[MIGRATION_START]\n"
    "{migration_commands}\n"
    "[MIGRATION_END]\n\n"
    "Original Query:\n"
    "[QUERY_START]\n"
    "{query}\n"
    "[QUERY_END]\n\n"
    "Optimization Rules:\n"
    "- Apply new table / column / index names.\n"
    "- Remove unnecessary subqueries / CTEs.\n"
    "- Push filters down; replace SELECT * with explicit columns.\n"
    "- Eliminate redundant JOINs.\n"
    "- Prefer EXISTS over IN when appropriate; anti-joins where faster.\n"
    "- Use window functions only if they reduce complexity.\n"
    "- Keep semantics identical.\n"
    "- If materialized views or generated columns help, use them.\n"
    "Output ONLY the rewritten SQL query. No commentary.\n"
)
