CREATE_NEW_DDL_STATEMENTS = (
    "Role: Senior Database Performance Engineer.\n"
    "Goal: Propose an improved physical schema for the given tables.\n\n"
    "INPUT DDL:\n{input_ddl_statements}\n\n"
    "INPUT QUERIES:\n{input_queries}\n\n"
    "Rules:\n"
    "- Preserve all existing data logically\n"
    "- Adjust data types, indexes, constraints as needed\n"
    "- Add materialized views only if beneficial (name: mv_<purpose>)\n"
    "- No comments, no explanations, no markdown\n\n"
    "CRITICAL OUTPUT FORMAT:\n"
    "You MUST output ONLY raw SQL statements, one per line.\n"
    "Do NOT wrap in markdown code blocks (no ```sql or ```).\n"
    "Do NOT add explanatory text before or after.\n"
    "Do NOT add SQL comments (no -- or /* */).\n\n"
    "EXAMPLE OUTPUT (follow this exact format):\n"
    "CREATE TABLE users (id INT PRIMARY KEY, name VARCHAR(100) NOT NULL);\n"
    "CREATE INDEX idx_users_name ON users(name);\n"
    "ALTER TABLE users ADD CONSTRAINT fk_users_dept FOREIGN KEY (dept_id) REFERENCES departments(id);\n\n"
    "NOW OUTPUT YOUR SQL STATEMENTS:\n"
)

CREATE_MIGRATIONS = (
    "Role: Senior Database Migration Engineer.\n"
    "Task: Generate idempotent SQL migration commands to transform OLD schema data into the NEW schema.\n\n"
    "OLD DDL:\n"
    "[OLD_DDL_START]\n"
    "{input_ddl_statements}\n"
    "[OLD_DDL_END]\n\n"
    "NEW DDL:\n"
    "[NEW_DDL_START]\n"
    "{output_ddl_statements}\n"
    "[NEW_DDL_END]\n\n"
    "Requirements:\n"
    "- Output ONLY executable SQL statements, one per line, in correct dependency order.\n"
    "- Include: CREATE (if needed), ALTER, RENAME, ADD COLUMN with defaults, data backfill (INSERT ... SELECT ...), index creation AFTER data load, constraints last.\n"
    "- Preserve all data; populate new/generated/renamed columns.\n"
    "- For splits: create new tables and distribute rows.\n"
    "- For merges: consolidate with deduping logic.\n"
    "- Use explicit column lists in INSERT ... SELECT.\n"
    "- Wrap destructive steps (drops) at the end and only after successful migration.\n"
    "- Make statements idempotent where feasible (e.g., CREATE TABLE IF NOT EXISTS, conditional adds when dialect supports).\n"
    "- No transaction wrappers (handled externally).\n"
    "- DO NOT DROP EXISTING TABLES.\n"
    "Output: only SQL statements, no explanations, no comments, each migration statement on a new line. DO NOT USE SPECIAL FORMATTING.\n"
)

OPTIMIZE_QUERY = (
    "Role: SQL Performance Engineer.\n"
    "Given the migration commands (which imply new schema) rewrite and optimize the provided SQL query to target the NEW schema.\n\n"
    "Migration / Schema Hints:\n"
    "[MIGRATION_START]\n"
    "{migration_commands}\n"
    "[MIGRATION_END]\n\n"
    "Original Query:\n"
    "[QUERY_START]\n"
    "{query}\n"
    "[QUERY_END]\n"
    "Optimization Rules:\n"
    "- Apply new table / column / index names.\n"
    "- Remove unnecessary subqueries / CTEs.\n"
    "- Push filters down; replace SELECT * with explicit columns.\n"
    "- Eliminate redundant JOINs.\n"
    "- Prefer EXISTS over IN when appropriate; anti-joins where faster.\n"
    "- Use window functions only if they reduce complexity.\n"
    "- Keep semantics identical.\n"
    "- If materialized views or generated columns help, use them.\n"
    "Output ONLY the rewritten query. No commentary, no adding not used special symbols. DO NOT USE SPECIAL FORMATTING."
)
