{
    "ddl": [],
    "migrations": [],
    "queries": [
        {
            "queryid": "10ba3c04-0f91-4ef3-a717-c1e0d33b31bc",
            "query": "WITH FlightDataWithCounts AS ( SELECT Origin, month(FlightDate) AS Month, CASE WHEN DepTimeBlk IN ('0600-0659', '0700-0759', '0800-0859', '1600-1659', '1700-1759', '1800-1859') THEN 'Peak' ELSE 'Off-Peak' END AS TimeOfDay, TaxiOut, DepDelay, ArrDelay, DepDel15, COUNT(*) OVER (PARTITION BY month(FlightDate), Origin) AS TotalFlightsForOriginMonth FROM flights.public.flights WHERE Cancelled = false AND Diverted = false ), RankedFlights AS ( SELECT Origin, Month, TimeOfDay, TaxiOut, DepDelay, ArrDelay, DepDel15, RANK() OVER (PARTITION BY Month ORDER BY TotalFlightsForOriginMonth DESC) AS AirportRank FROM FlightDataWithCounts ) SELECT Month, Origin, TimeOfDay, COUNT(*) AS TotalFlights, ROUND(AVG(TaxiOut), 2) AS AvgTaxiOut, ROUND(AVG(DepDelay), 2) AS AvgDEPDelay, ROUND(AVG(ArrDelay), 2) AS AvgARRDelay, ROUND(CORR(TaxiOut, DepDelay), 2) AS TaxiOut_DepDelay_Correlation, ROUND(CORR(TaxiOut, ArrDelay), 2) AS TaxiOut_ArrDelay_Correlation, COUNT_IF(DepDel15 = 1) AS DelayedFlights, ROUND( (COUNT_IF(DepDel15 = 1) * 100.0 / COUNT(*)), 2 ) AS PercentDelayed FROM RankedFlights WHERE AirportRank <= 10 GROUP BY Month, Origin, TimeOfDay ORDER BY Month DESC, Origin, TimeOfDay;"
        },
        {
            "queryid": "8abd47c0-31cb-4ba0-891f-9bac53bbc909",
            "query": "WITH unpivoted_flights AS ( SELECT role.AirportRole, CASE role.AirportRole WHEN 'Origin' THEN Origin ELSE Dest END AS Airport, CASE role.AirportRole WHEN 'Origin' THEN OriginCityName ELSE DestCityName END AS AirportCity, CASE role.AirportRole WHEN 'Origin' THEN OriginState ELSE DestState END AS AirportState, ActualElapsedTime - CRSElapsedTime AS Discrepancy, CASE role.AirportRole WHEN 'Origin' THEN DepDelay ELSE ArrDelay END AS DepDelay, CASE role.AirportRole WHEN 'Origin' THEN DepDelayMinutes ELSE ArrDelayMinutes END AS DepDelayMinutes, CASE role.AirportRole WHEN 'Origin' THEN TaxiOut ELSE TaxiIn END AS TaxiOut, CASE role.AirportRole WHEN 'Origin' THEN DepDel15 ELSE ArrDel15 END AS Del15, Diverted FROM flights.public.flights CROSS JOIN (VALUES ('Origin'), ('Destination')) AS role(AirportRole) WHERE CRSElapsedTime IS NOT NULL AND ActualElapsedTime IS NOT NULL AND CRSElapsedTime > 0 AND Cancelled = false ), AirportDiscrepancy AS ( SELECT Airport, AirportCity, AirportState, AirportRole, COUNT(*) AS TotalFlights, AVG(Discrepancy) AS AvgDiscrepancy, AVG(DepDelay) AS AvgDepDelay, AVG(DepDelayMinutes) AS AvgDepDelayMinutes, AVG(TaxiOut) AS AvgTaxiOut, AVG(CASE WHEN Del15 = 1 THEN 1.0 ELSE 0.0 END) AS PercentDelayedDepartures, AVG(CAST(Diverted AS double)) AS PercentDiverted FROM unpivoted_flights GROUP BY 1, 2, 3, 4 ), RankedAirports AS ( SELECT *, RANK() OVER (ORDER BY AvgDiscrepancy DESC) AS DiscrepancyRank FROM AirportDiscrepancy WHERE TotalFlights > 1000 ) SELECT Airport, AirportCity, AirportState, AirportRole, TotalFlights, ROUND(AvgDiscrepancy, 2) AS AvgDiscrepancyMinutes, ROUND(AvgDepDelay, 2) AS AvgDelayMinutes, ROUND(AvgDepDelayMinutes, 2) AS AvgDelayMinutesNonNegative, ROUND(AvgTaxiOut, 2) AS AvgTaxiTimeMinutes, ROUND(PercentDelayedDepartures * 100, 2) AS PercentDelayedFlights, ROUND(PercentDiverted * 100, 2) AS PercentDivertedFlights, 0.00 AS PercentCancelledFlights, DiscrepancyRank FROM RankedAirports WHERE DiscrepancyRank <= 20 ORDER BY DiscrepancyRank;"
        },
        {
            "queryid": "38a70da3-f3f2-48e9-896d-4f9303598967",
            "query": "SELECT Operating_Airline AS Airline, DayOfWeek, COUNT(*) AS TotalFlights, ROUND(AVG(DepDelayMinutes), 2) AS AvgDepartureDelayMinutes, COUNT_IF(DepDel15 = 0) AS OnTimeFlights, ROUND(AVG(IF(DepDel15 = 0, 100.0, 0.0)), 2) AS OnTimePerformancePercent FROM flights.public.flights WHERE Cancelled = false AND Diverted = false AND DepDelayMinutes IS NOT NULL GROUP BY Operating_Airline, DayOfWeek ORDER BY OnTimePerformancePercent DESC, AvgDepartureDelayMinutes ASC;"
        },
        {
            "queryid": "eee49065-116e-456a-83d9-0e0ef8083086",
            "query": "WITH MajorAirports AS ( SELECT Origin AS Airport, OriginCityName AS AirportCity FROM flights.public.flights GROUP BY Origin, OriginCityName ORDER BY COUNT(*) DESC LIMIT 10 ) SELECT f.Origin AS Airport, m.AirportCity, f.DepTimeBlk, COUNT(*) AS TotalFlights, ROUND(AVG(f.TaxiOut), 2) AS AvgTaxiOutMinutes, ROUND(AVG(f.DepDelayMinutes), 2) AS AvgDepartureDelayMinutes, ROUND(CORR(f.TaxiOut, f.DepDelayMinutes), 3) AS TaxiOut_DepDelay_Correlation, COUNT_IF(f.DepDel15 = 1) AS DelayedFlights, ROUND(COUNT_IF(f.DepDel15 = 1) * 100.0 / COUNT(*), 2) AS PercentDelayed15Plus, ROUND(AVG(CASE WHEN f.TaxiOut <= 10 THEN f.DepDelayMinutes END), 2) AS AvgDelay_TaxiOut_0_10, ROUND(AVG(CASE WHEN f.TaxiOut > 10 AND f.TaxiOut <= 20 THEN f.DepDelayMinutes END), 2) AS AvgDelay_TaxiOut_11_20, ROUND(AVG(CASE WHEN f.TaxiOut > 20 THEN f.DepDelayMinutes END), 2) AS AvgDelay_TaxiOut_20Plus FROM flights.public.flights f JOIN MajorAirports m ON f.Origin = m.Airport WHERE f.Cancelled = false AND f.Diverted = false AND f.TaxiOut IS NOT NULL AND f.DepDelayMinutes IS NOT NULL AND f.DepTimeBlk IN ('0600-0659', '0700-0759', '0800-0859', '1600-1659', '1700-1759', '1800-1859') GROUP BY f.Origin, m.AirportCity, f.DepTimeBlk ORDER BY Airport, DepTimeBlk;"
        },
        {
            "queryid": "d7e84363-86f7-47a2-851f-41a793fea732",
            "query": "SELECT Origin AS Airport, OriginCityName AS AirportCity, OriginState AS AirportState, COUNT(*) AS TotalFlights, COUNT_IF(DepDel15 = 1) AS DelayedFlights, ROUND(COUNT_IF(DepDel15 = 1) * 100.0 / COUNT(*), 2) AS PercentDelayedFlights, ROUND(AVG(DepDelay), 2) AS AvgDepartureDelayMinutes, ROUND(AVG(TaxiOut), 2) AS AvgTaxiOutMinutes FROM flights.public.flights WHERE Cancelled = false AND Diverted = FALSE AND DepDel15 IS NOT NULL AND DepDelay IS NOT NULL AND TaxiOut IS NOT NULL GROUP BY Origin, OriginCityName, OriginState HAVING COUNT(*) > 1000 ORDER BY PercentDelayedFlights DESC, AvgDepartureDelayMinutes DESC LIMIT 20;"
        },
        {
            "queryid": "20eca341-19e1-4d85-a75d-07d9253ff06d",
            "query": "SELECT DistanceGroup, COUNT(*) AS TotalFlights, ROUND(CORR(DepDelayMinutes, ArrDelayMinutes), 3) AS DelayCorrelation, ROUND(AVG(DepDelayMinutes), 2) AS AvgDepartureDelayMinutes, ROUND(AVG(ArrDelayMinutes), 2) AS AvgArrivalDelayMinutes, ROUND(COUNT_IF(DepDel15 = 1) * 100.0 / COUNT(*), 2) AS PercentDelayedDepartures, ROUND(COUNT_IF(ArrDel15 = 1) * 100.0 / COUNT(*), 2) AS PercentDelayedArrivals FROM flights.public.flights WHERE Cancelled = false AND Diverted = false AND DepDelayMinutes IS NOT NULL AND ArrDelayMinutes IS NOT NULL AND DistanceGroup IS NOT NULL GROUP BY DistanceGroup ORDER BY DistanceGroup;"
        },
        {
            "queryid": "aaf7984c-796c-4df7-b29f-e63362d1823d",
            "query": "WITH CategorizedFlights AS ( SELECT IF(Distance < 500, 'Short-Haul (<500 miles)', 'Long-Haul (>1500 miles)') AS FlightCategory, DepartureDelayGroups, DepDelayMinutes, DepDel15 FROM flights.public.flights WHERE Cancelled = false AND Diverted = false AND DepartureDelayGroups IS NOT NULL AND (Distance < 500 OR Distance > 1500) ) SELECT FlightCategory, DepartureDelayGroups, COUNT(*) AS FlightCount, ROUND(COUNT(*) * 100.0 / SUM(COUNT(*)) OVER (PARTITION BY FlightCategory), 2) AS PercentageOfCategory, ROUND(AVG(DepDelayMinutes), 2) AS AvgDelayMinutes, ROUND(COUNT_IF(DepDel15 = 1) * 100.0 / COUNT(*), 2) AS PercentDelayed15Plus FROM CategorizedFlights GROUP BY 1, 2 ORDER BY 1, 2;"
        },
        {
            "queryid": "c1de9515-3da5-4440-a6d9-537e2cc4f5c8",
            "query": "WITH BaseAgg AS ( SELECT Dest AS DestinationAirport, DestCityName AS DestinationCity, DestState AS DestinationState, ArrTimeBlk AS ArrivalTimeBlock, DistanceGroup, COUNT(*) AS TotalFlights, COUNT_IF(ArrDel15 = 1) AS DelayedFlights, AVG(ArrDelayMinutes) FILTER (WHERE ArrDel15 = 1) AS AvgDelayDurationMinutes FROM flights.public.flights WHERE Cancelled = false AND Diverted = false AND ArrDel15 IS NOT NULL GROUP BY Dest, DestCityName, DestState, ArrTimeBlk, DistanceGroup ), RatesWithGroupAvg AS ( SELECT *, CAST(DelayedFlights AS DOUBLE) / TotalFlights AS DelayRate, CAST(SUM(DelayedFlights) OVER (PARTITION BY DistanceGroup) AS DOUBLE) / SUM(TotalFlights) OVER (PARTITION BY DistanceGroup) AS AvgDistanceGroupDelayRate FROM BaseAgg ) SELECT DestinationAirport, DestinationCity, DestinationState, ArrivalTimeBlock, DistanceGroup, TotalFlights, ROUND(DelayRate * 100, 2) AS ArrivalDelayRatePercent, ROUND(AvgDistanceGroupDelayRate * 100, 2) AS AvgDistanceGroupDelayRatePercent, ROUND((DelayRate - AvgDistanceGroupDelayRate) * 100, 2) AS DelayRateDifferenceFromAverage, ROUND(AvgDelayDurationMinutes, 2) AS AvgDelayDurationMinutes FROM RatesWithGroupAvg WHERE TotalFlights > 50 ORDER BY DestinationAirport, DistanceGroup, ArrivalTimeBlock;"
        },
        {
            "queryid": "a7972ec2-5b53-4411-b5e7-cb4f9f14f25b",
            "query": "WITH Aggregates AS ( SELECT DistanceGroup, Dest AS DestinationAirport, DestCityName, DestState, ArrTimeBlk, COUNT(*) AS TotalFlights, avg(CAST(ArrDelayMinutes >= 15 AS double)) AS DelayRate, avg(ArrDelayMinutes) AS AvgArrDelayMinutes FROM flights.public.flights WHERE Cancelled = false AND Diverted = false AND ArrDelayMinutes IS NOT NULL GROUP BY GROUPING SETS ( (DistanceGroup), (Dest, DestCityName, DestState, ArrTimeBlk, DistanceGroup) ) ), DistanceGroupAverages AS ( SELECT DistanceGroup, DelayRate AS AvgDelayRate FROM Aggregates WHERE DestinationAirport IS NULL ), AirportDelayRates AS ( SELECT DestinationAirport, DestCityName, DestState, ArrTimeBlk, DistanceGroup, TotalFlights, DelayRate, AvgArrDelayMinutes FROM Aggregates WHERE DestinationAirport IS NOT NULL AND TotalFlights > 50 ) SELECT adr.DestinationAirport, adr.DestCityName AS DestinationCity, adr.DestState AS DestinationState, adr.ArrTimeBlk, adr.DistanceGroup, adr.TotalFlights, ROUND(adr.DelayRate * 100, 2) AS ArrivalDelayRatePercent, ROUND(dga.AvgDelayRate * 100, 2) AS AvgDistanceGroupDelayRatePercent, ROUND((adr.DelayRate - dga.AvgDelayRate) * 100, 2) AS DelayRateDifferenceFromAverage, ROUND(CASE WHEN adr.AvgArrDelayMinutes >= 15 THEN adr.AvgArrDelayMinutes END, 2) AS AvgDelayDurationMinutes FROM AirportDelayRates adr JOIN DistanceGroupAverages dga ON adr.DistanceGroup = dga.DistanceGroup ORDER BY adr.DestinationAirport, adr.DistanceGroup, adr.ArrTimeBlk;"
        },
        {
            "queryid": "207ef12b-a027-4624-9ac5-0231bfeda82b",
            "query": "WITH base_agg AS (SELECT OriginCityName, DestCityName, COUNT(*) AS TotalFlights, COUNT_IF(Cancelled) AS CancelledFlights, COUNT_IF(Month IN (12, 1, 2)) AS WinterFlights, COUNT_IF(Month IN (12, 1, 2) AND Cancelled) AS WinterCancelled, COUNT_IF(Month IN (3, 4, 5)) AS SpringFlights, COUNT_IF(Month IN (3, 4, 5) AND Cancelled) AS SpringCancelled, COUNT_IF(Month IN (6, 7, 8)) AS SummerFlights, COUNT_IF(Month IN (6, 7, 8) AND Cancelled) AS SummerCancelled, COUNT_IF(Month IN (9, 10, 11)) AS FallFlights, COUNT_IF(Month IN (9, 10, 11) AND Cancelled) AS FallCancelled FROM flights.public.flights GROUP BY OriginCityName, DestCityName HAVING COUNT(*) > 100) SELECT OriginCityName || ' → ' || DestCityName AS CityPair, OriginCityName, DestCityName, TotalFlights, CancelledFlights, ROUND(CancelledFlights * 100.0 / TotalFlights, 2) AS CancellationRate, WinterFlights, WinterCancelled, ROUND(WinterCancelled * 100.0 / NULLIF(WinterFlights, 0), 2) AS WinterCancellationRate, SpringFlights, SpringCancelled, ROUND(SpringCancelled * 100.0 / NULLIF(SpringFlights, 0), 2) AS SpringCancellationRate, SummerFlights, SummerCancelled, ROUND(SummerCancelled * 100.0 / NULLIF(SummerFlights, 0), 2) AS SummerCancellationRate, FallFlights, FallCancelled, ROUND(FallCancelled * 100.0 / NULLIF(FallFlights, 0), 2) AS FallCancellationRate FROM base_agg ORDER BY CancellationRate DESC LIMIT 50;"
        },
        {
            "queryid": "1c76f499-bc7d-4151-b832-2159698bb251",
            "query": "SELECT CORR(FlightFrequency, OnTimeDepartureRate) AS Frequency_DepartureCorrelation, CORR(FlightFrequency, OnTimeArrivalRate) AS Frequency_ArrivalCorrelation, COUNT(*) AS TotalRoutesAnalyzed, MIN(FlightFrequency) AS MinRouteFrequency, MAX(FlightFrequency) AS MaxRouteFrequency, AVG(FlightFrequency) AS AvgRouteFrequency FROM (SELECT COUNT(*) AS FlightFrequency, CAST(COUNT_IF(DepDel15 = 0) AS DOUBLE) / COUNT(*) AS OnTimeDepartureRate, CAST(COUNT_IF(ArrDel15 = 0) AS DOUBLE) / COUNT(*) AS OnTimeArrivalRate FROM flights.public.flights WHERE NOT Cancelled AND NOT Diverted GROUP BY Origin, Dest HAVING COUNT(*) > 100) RoutePerformance;"
        },
        {
            "queryid": "6eb3dac9-e27a-462c-ac95-a33eff0c2695",
            "query": "SELECT DistanceGroup, COUNT(*) AS TotalFlights, ROUND(AVG(Distance), 2) AS AvgDistanceMiles, ROUND(AVG(AirTime), 2) AS AvgAirTimeMinutes, ROUND(AVG(CAST(AirTime AS double) / Distance), 4) AS AvgMinutesPerMile, ROUND(AVG(CAST(CRSElapsedTime AS double) / Distance), 4) AS AvgScheduledMinutesPerMile, ROUND((AVG(CAST(AirTime AS double) / Distance) / MIN(CASE WHEN DistanceGroup = 1 THEN CAST(AirTime AS double) / Distance END)) * 100.0 - 100.0, 2) AS EfficiencyDeviationFromShortest, ROUND(AVG(CRSElapsedTime - AirTime), 2) AS AvgBufferTime, ROUND(COUNT_IF(AirTime > CRSElapsedTime) * 100.0 / COUNT(*), 2) AS PercentFlightsExceedingScheduledAirTime FROM flights.public.flights WHERE NOT Cancelled AND NOT Diverted AND Distance > 0 AND AirTime IS NOT NULL AND CRSElapsedTime IS NOT NULL GROUP BY DistanceGroup ORDER BY DistanceGroup;"
        },
        {
            "queryid": "2f4177b6-e7e6-4cf8-88a6-1bac1589c374",
            "query": "SELECT DistanceGroup, COUNT(*) AS TotalFlights, COUNT_IF(Cancelled) AS CancelledFlights, ROUND(CAST(COUNT_IF(Cancelled) AS DOUBLE) * 100.0 / COUNT(*), 2) AS CancellationRatePercent, ROUND(AVG(Distance), 2) AS AvgDistanceMiles, ROUND(AVG(Month), 2) AS AvgMonth, ROUND(AVG(DayOfWeek), 2) AS AvgDayOfWeek FROM flights.public.flights GROUP BY DistanceGroup HAVING COUNT(*) > 100 ORDER BY CancellationRatePercent DESC;"
        },
        {
            "queryid": "ebfe26f2-8f45-4038-9eb2-148696d26292",
            "query": "WITH AirportAirlineMetrics AS ( SELECT Operating_Airline, Origin, COUNT(*) AS TotalHubFlights, COUNT_IF(TaxiOut > 0) AS TotalTaxiFlights, ROUND(AVG(CASE WHEN TaxiOut > 0 THEN TaxiOut END), 2) AS AvgTaxiOut, ROUND(STDDEV_SAMP(CASE WHEN TaxiOut > 0 THEN TaxiOut END), 2) AS TaxiOutStdDev, ROUND(AVG(CASE WHEN DepDel15 = 0 AND TaxiOut > 0 THEN TaxiOut END), 2) AS AvgTaxiOutOnTime, ROUND(AVG(CASE WHEN DepDel15 = 1 AND TaxiOut > 0 THEN TaxiOut END), 2) AS AvgTaxiOutDelayed, ROUND(COUNT_IF(DepDel15 = 0 AND TaxiOut > 0) * 100.0 / NULLIF(COUNT_IF(TaxiOut > 0), 0), 2) AS OnTimeDepartureRate FROM flights.public.flights WHERE NOT Cancelled AND NOT Diverted GROUP BY Operating_Airline, Origin ), RankedHubs AS ( SELECT *, RANK() OVER (PARTITION BY Operating_Airline ORDER BY TotalHubFlights DESC) AS HubRank FROM AirportAirlineMetrics WHERE TotalHubFlights > 100 ) SELECT Operating_Airline, Origin AS HubAirport, TotalTaxiFlights AS TotalFlights, AvgTaxiOut, TaxiOutStdDev, AvgTaxiOutOnTime, AvgTaxiOutDelayed, OnTimeDepartureRate, RANK() OVER (ORDER BY AvgTaxiOut ASC) AS TaxiEfficiencyRank FROM RankedHubs WHERE HubRank = 1 AND TotalTaxiFlights > 500 ORDER BY TaxiEfficiencyRank;"
        },
        {
            "queryid": "9f984b51-91b7-4101-8cdd-77564460c3ea",
            "query": "SELECT Operating_Airline, CASE WHEN Operated_or_Branded_Code_Share_Partners NOT IN ('', 'NA') THEN 'Code-Share Operation' ELSE 'Regular Operation' END AS OperationType, COUNT(*) AS TotalFlights, ROUND(COUNT_IF(DepDel15 = 1) * 100.0 / COUNT(*), 2) AS DepartureDelayRate, ROUND(COUNT_IF(ArrDel15 = 1) * 100.0 / COUNT(*), 2) AS ArrivalDelayRate, ROUND(AVG(DepDelayMinutes), 2) AS AvgDepartureDelayMinutes, ROUND(AVG(ArrDelayMinutes), 2) AS AvgArrivalDelayMinutes, ROUND(COUNT_IF(DepDel15 = 0) * 100.0 / COUNT(*), 2) AS OnTimeDepartureRate, ROUND(COUNT_IF(ArrDel15 = 0) * 100.0 / COUNT(*), 2) AS OnTimeArrivalRate FROM flights.public.flights WHERE NOT Cancelled AND NOT Diverted AND DepDel15 IS NOT NULL AND ArrDel15 IS NOT NULL GROUP BY 1, 2 HAVING COUNT(*) > 100 ORDER BY Operating_Airline, OperationType;"
        },
        {
            "queryid": "d50a8dfe-6f77-43cc-ad6a-f3e8a18aa1e0",
            "query": "WITH categorized_flights AS ( SELECT Operating_Airline, DepDel15, CASE WHEN REGEXP_LIKE(Tail_Number, '^N[0-9][A-Z]{4}$') THEN 'N + 1 digit + 4 letters' WHEN REGEXP_LIKE(Tail_Number, '^N[0-9]{2}[A-Z]{3}$') THEN 'N + 2 digits + 3 letters' WHEN REGEXP_LIKE(Tail_Number, '^N[0-9][A-Z]{3}$') THEN 'N + 1 digit + 3 letters' WHEN REGEXP_LIKE(Tail_Number, '^N[0-9]{3}[A-Z]{2}$') THEN 'N + 3 digits + 2 letters' WHEN REGEXP_LIKE(Tail_Number, '^N[0-9]{2}[A-Z]{2}$') THEN 'N + 2 digits + 2 letters' WHEN REGEXP_LIKE(Tail_Number, '^N[0-9]{4}[A-Z]$') THEN 'N + 4 digits + 1 letter' WHEN REGEXP_LIKE(Tail_Number, '^N[0-9]{3}[A-Z]$') THEN 'N + 3 digits + 1 letter' WHEN REGEXP_LIKE(Tail_Number, '^N[0-9]{5}$') THEN 'N + 5 digits' WHEN REGEXP_LIKE(Tail_Number, '^N[0-9]{4}$') THEN 'N + 4 digits' WHEN REGEXP_LIKE(Tail_Number, '^N[0-9]{3}$') THEN 'N + 3 digits' WHEN REGEXP_LIKE(Tail_Number, '^N[0-9]{2}$') THEN 'N + 2 digits' WHEN REGEXP_LIKE(Tail_Number, '^N[0-9]$') THEN 'N + 1 digit' ELSE 'Other' END AS AircraftTypeCategory FROM flights.public.flights WHERE Tail_Number IS NOT NULL AND Operating_Airline IS NOT NULL AND DepDel15 IS NOT NULL AND COALESCE(Cancelled, false) = false AND COALESCE(Diverted, false) = false ) SELECT Operating_Airline, AircraftTypeCategory, COUNT(*) AS TotalFlights, COUNT_IF(DepDel15 = 1) AS DelayedFlights, ROUND(CAST(COUNT_IF(DepDel15 = 1) AS DOUBLE) * 100.0 / COUNT(*), 2) AS DelayPercentage FROM categorized_flights GROUP BY Operating_Airline, AircraftTypeCategory HAVING COUNT(*) > 50 ORDER BY Operating_Airline, DelayPercentage DESC;"
        },
        {
            "queryid": "3e6e6491-e2ec-4741-9007-ba9580615736",
            "query": "WITH Aggregations AS ( SELECT Operating_Airline, COUNT(*) AS TotalFlights, COUNT_IF(DepDel15 = 1) AS TotalDelayedDepartures, COUNT_IF(DepDel15 = 1 AND ArrDel15 = 0) AS RecoveredFlights, COUNT_IF(DepDel15 = 1 AND ArrDel15 = 1) AS UnrecoveredFlights, AVG_IF(DepDelayMinutes, DepDel15 = 1) AS AvgDepartureDelayForDelayedFlights_raw, AVG_IF(DepDelayMinutes, DepDel15 = 1 AND ArrDel15 = 0) AS AvgDepartureDelayForRecoveredFlights_raw, AVG_IF(ArrDelayMinutes - DepDelayMinutes, DepDel15 = 1 AND ArrDel15 = 1) AS AvgDelayIncreaseDuringFlight_raw FROM flights.public.flights WHERE Cancelled = false AND Diverted = false AND DepDel15 IS NOT NULL AND ArrDel15 IS NOT NULL GROUP BY Operating_Airline ) SELECT Operating_Airline, TotalFlights, TotalDelayedDepartures, RecoveredFlights, UnrecoveredFlights, ROUND(RecoveredFlights * 100.0 / NULLIF(TotalDelayedDepartures, 0), 2) AS RecoveryRatePercent, ROUND(AvgDepartureDelayForDelayedFlights_raw, 2) AS AvgDepartureDelayForDelayedFlights, ROUND(AvgDepartureDelayForRecoveredFlights_raw, 2) AS AvgDepartureDelayForRecoveredFlights, ROUND(AvgDelayIncreaseDuringFlight_raw, 2) AS AvgDelayIncreaseDuringFlight FROM Aggregations WHERE TotalDelayedDepartures > 100 ORDER BY RecoveryRatePercent DESC;"
        },
        {
            "queryid": "b5c9bdcd-17ac-44bb-a246-756b9fad907a",
            "query": "WITH Aggregates AS ( SELECT FlightDate, DistanceGroup, COUNT(*) AS TotalFlights, COUNT_IF(DepDel15 = 1) AS DelayedFlights FROM flights.public.flights WHERE Cancelled = false AND Diverted = false GROUP BY FlightDate, DistanceGroup ) SELECT FlightDate, DistanceGroup, TotalFlights, DelayedFlights, CASE WHEN DistanceGroup <= 2 THEN DelayedFlights * 120 ELSE 0 END AS EstimatedPassengersShortHaul, CASE WHEN DistanceGroup BETWEEN 3 AND 4 THEN DelayedFlights * 150 ELSE 0 END AS EstimatedPassengersMediumHaul, CASE WHEN DistanceGroup >= 5 THEN DelayedFlights * 180 ELSE 0 END AS EstimatedPassengersLongHaul, DelayedFlights * CASE WHEN DistanceGroup <= 2 THEN 120 WHEN DistanceGroup BETWEEN 3 AND 4 THEN 150 WHEN DistanceGroup >= 5 THEN 180 ELSE 0 END AS TotalEstimatedAffectedPassengers, ROUND(DelayedFlights * 100.0 / TotalFlights, 2) AS DelayRatePercentage FROM Aggregates ORDER BY FlightDate DESC, TotalEstimatedAffectedPassengers DESC;"
        },
        {
            "queryid": "d576f288-9d34-4f78-a185-49501d43e01d",
            "query": "SELECT DepTimeBlk AS DepartureTimeBlock, COUNT(*) AS TotalFlights, COUNT_IF(DepDel15 = 1) AS DelayedDepartures, ROUND(AVG(CASE WHEN DepDel15 = 1 THEN DepDelay END), 2) AS AvgDepartureDelay, ROUND(AVG(CASE WHEN DepDel15 = 1 THEN ArrDelay END), 2) AS AvgArrivalDelay, ROUND(AVG(CASE WHEN DepDel15 = 1 THEN DepDelay - ArrDelay END), 2) AS AvgDelayRecoveryMinutes, ROUND(COUNT_IF(DepDel15 = 1 AND ArrDelay < DepDelay) * 100.0 / NULLIF(COUNT_IF(DepDel15 = 1), 0), 2) AS PercentFlightsRecoveredTime, ROUND(AVG(CASE WHEN DepDel15 = 1 AND ArrDelay < DepDelay THEN DepDelay - ArrDelay END), 2) AS AvgMinutesRecovered, ROUND(AVG(CASE WHEN DepDel15 = 1 AND ArrDelay >= DepDelay THEN DepDelay - ArrDelay END), 2) AS AvgDelayGrowth FROM flights.public.flights WHERE NOT Cancelled AND NOT Diverted AND DepDelay IS NOT NULL AND ArrDelay IS NOT NULL AND DepTimeBlk IS NOT NULL GROUP BY DepTimeBlk ORDER BY SUBSTRING(DepTimeBlk, 1, 2) ASC;"
        },
        {
            "queryid": "4ab2b57f-2806-4eba-9ded-48630300e5b4",
            "query": "WITH CancellationRates AS ( SELECT Operating_Airline, CASE WHEN Month = 11 AND DayofMonth BETWEEN 20 AND 30 THEN 'Thanksgiving' WHEN (Month = 12 AND DayofMonth >= 20) OR (Month = 1 AND DayofMonth <= 5) THEN 'Christmas_New_Year' ELSE 'Regular' END AS PeriodType, ROUND(COUNT_IF(Cancelled) * 100.0 / count(*), 2) AS CancellationRate FROM flights.public.flights GROUP BY 1, 2 HAVING count(*) > 100 ) SELECT Operating_Airline, PeriodType, CancellationRate AS HolidayCancellationRate, RegularCancellationRate, CancellationRate - RegularCancellationRate AS RateDifference, ROUND((CancellationRate - RegularCancellationRate) * 100.0 / NULLIF(RegularCancellationRate, 0), 2) AS PercentIncrease FROM ( SELECT Operating_Airline, PeriodType, CancellationRate, MAX(CASE WHEN PeriodType = 'Regular' THEN CancellationRate END) OVER (PARTITION BY Operating_Airline) AS RegularCancellationRate FROM CancellationRates ) WHERE PeriodType <> 'Regular' AND RegularCancellationRate IS NOT NULL ORDER BY PeriodType, RateDifference DESC;"
        },
        {
            "queryid": "e4b0a2ef-1155-46fd-8b66-c364ae03783f",
            "query": "WITH MonthlyData AS (SELECT Year, Month, count(*) AS AirTrafficVolume, avg(DepDelayMinutes) AS AvgDepartureDelay FROM flights.public.flights WHERE (Cancelled IS NULL OR Cancelled = false) AND ((Year = 2019 AND Month <= CAST(month(current_date) AS integer)) OR (Year = 2018 AND Month > CAST(month(current_date) AS integer))) GROUP BY Year, Month) SELECT Year, Month, AirTrafficVolume, AvgDepartureDelay, corr(AvgDepartureDelay, AirTrafficVolume) OVER () AS DelayVolumeCorrelation FROM MonthlyData ORDER BY Year, Month;"
        },
        {
            "queryid": "19b36ab4-3822-407c-9f98-fcb38bf758ba",
            "query": "WITH RouteStats AS ( SELECT Origin, Dest, DayOfWeek, DepTimeBlk, Cancelled, Diverted, DepDel15, DepDelayMinutes, TaxiOut, COUNT(*) OVER (PARTITION BY Origin, Dest) AS TotalRouteFlights, COUNT_IF(DayOfWeek BETWEEN 1 AND 5) OVER (PARTITION BY Origin, Dest) AS WeekdayFlights, COUNT_IF(DayOfWeek BETWEEN 6 AND 7) OVER (PARTITION BY Origin, Dest) AS WeekendFlights, COUNT_IF(DepTimeBlk IN ('0500-0559', '0600-0659', '0700-0759', '0800-0859', '0900-0959')) OVER (PARTITION BY Origin, Dest) AS MorningFlights, COUNT_IF(DepTimeBlk IN ('1600-1659', '1700-1759', '1800-1859', '1900-1959')) OVER (PARTITION BY Origin, Dest) AS EveningFlights, COUNT_IF(DepTimeBlk IN ('1000-1059', '1100-1159', '1200-1259', '1300-1359', '1400-1459', '1500-1559')) OVER (PARTITION BY Origin, Dest) AS MiddayFlights, COUNT_IF(DepTimeBlk IN ('2000-2059', '2100-2159', '2200-2259', '2300-2359', '0001-0559', '0000-0059', '0100-0159', '0200-0259', '0300-0359', '0400-0459')) OVER (PARTITION BY Origin, Dest) AS MidnightFlights, COUNT_IF(Origin IN ('JFK', 'LAX', 'ORD', 'DFW', 'SFO', 'BOS', 'ATL', 'EWR', 'IAD', 'SEA') AND Dest IN ('JFK', 'LAX', 'ORD', 'DFW', 'SFO', 'BOS', 'ATL', 'EWR', 'IAD', 'SEA')) OVER (PARTITION BY Origin, Dest) AS BusinessHubFlights, COUNT_IF(Dest IN ('LAS', 'MCO', 'FLL', 'MIA', 'BWI', 'SAN', 'HNL', 'SLC', 'TPA')) OVER (PARTITION BY Origin, Dest) AS LeisureDestinationFlights FROM flights.public.flights ), DelayPatterns AS ( SELECT CASE WHEN (WeekdayFlights * 1.0 / NULLIF(WeekendFlights, 0) > 1.5 AND (MorningFlights + EveningFlights) * 1.0 / (MorningFlights + EveningFlights + MiddayFlights + MidnightFlights) > 0.5 AND BusinessHubFlights > 0) THEN 'Business-Heavy' WHEN (WeekendFlights * 1.0 / NULLIF(WeekdayFlights, 0) > 0.7 AND MiddayFlights * 1.0 / (MorningFlights + EveningFlights + MiddayFlights + MidnightFlights) > 0.4 AND LeisureDestinationFlights > 0) THEN 'Leisure' ELSE 'Mixed' END AS RouteType, CASE WHEN DayOfWeek BETWEEN 1 AND 5 THEN 'Weekday' ELSE 'Weekend' END AS DayType, COUNT(*) AS TotalFlights, COUNT_IF(DepDel15 = 1) AS DelayedFlights, ROUND(COUNT_IF(DepDel15 = 1) * 100.0 / COUNT(*), 2) AS DelayRatePercent, ROUND(AVG(DepDelayMinutes), 2) AS AvgDelayMinutes, ROUND(AVG(TaxiOut), 2) AS AvgTaxiOut FROM RouteStats WHERE TotalRouteFlights > 100 AND Cancelled = false AND Diverted = false GROUP BY 1, 2 ) SELECT RouteType, DayType, TotalFlights, DelayedFlights, DelayRatePercent, AvgDelayMinutes, AvgTaxiOut, ROUND(DelayRatePercent - AVG(DelayRatePercent) OVER (), 2) AS DelayRateVsOverallAvg FROM DelayPatterns ORDER BY RouteType, DayType;"
        }
    ]
}
